# -*- coding: utf-8 -*-
"""01_PerceptronTraining.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/Sourav61/MLnow_2.0/blob/main/01_PerceptronTraining.ipynb

Date Created: May 23,2021

Authoer <a href="https://github.com/Sourav61">Sourav Pahwa</a>
"""

from google.colab import drive
drive.mount('/content/drive')

"""Equation: y= 10*x

## Data Creation

Equation: y = 10*x

Target =>

x = [0, 1, 2, 3, 4, 5 ,...]

y = [0, 10, 20, 30, 40, 50, ...]
"""

x = [i for i in range(21)]

print(x)

y = [i for i in range(10*20+1) if i%10 == 0]

print(y)

"""Approach 1

Defining a funtion for the equation y=10*x
"""

def tempFunc(x):
  y=10*x
  return y

for values in x:
  print(tempFunc(values))

"""## Approach 2

I am super enthusiastic about ML.so i'm gonna redundant ML model for the table of '10'

You're going to need xTrain, yTrain, xTest and yTest from the x and y lists
"""

print(f"This is x: {x}")

print(f"This is y: {y}")

xTrain = x[:-5] #Training Data
yTrain = y[:-5] #Training Labels

xTest = x[-5:] #Testing Data 
yTest = y[-5:] #Testing Labels

print(f'''
Training Data

xTrain : {xTrain}
yTraim : {yTrain}

Testing Data

xTest : {xTest}
yTest : {yTest}
''')

import tensorflow as tf
from tensorflow import keras

#perceptron model

model = tf.keras.Sequential([
                             tf.keras.layers.Dense(units=1, input_shape=[1]) 
])

"""h(xTrain) = [...]

yTrain = []

length of yTrain = len(yTrain :

n = len(yTrain)

MAE = (xTrain_i - h(xTrain_i)]

"""

model.compile(optimizer = 'adam', loss='mae')

model.fit(x=xTrain,y=yTrain, validation_data=(xTest, yTest), epochs=5000)

"""val_loss and loss can be analogous to cost function J(x)"""





